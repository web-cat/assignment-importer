package org.webcat.eclipse.importer.model;

import java.util.Scanner;
import java.util.ArrayList;
import java.net.URI;
import org.w3c.dom.Node;

// -------------------------------------------------------------------------
/**
 *  Represents a single project in the import definition tree. A project is an
 *  actionable object to which projects can be imported.
 *
 *  @author bellen08
 *  @version Jan 22, 2012
 */
public class ProjectTarget
    extends ImportTarget
{

    // ----------------------------------------------------------
    /**
     * Create a new ProjectTarget object.
     * @param parent
     */
    public ProjectTarget(ImportTarget parent)
    {
        super(parent);
    }

    @Override
    public boolean isContainer()
    {
        return false;
    }

    @Override
    public boolean isNested()
    {
        return true;
    }

    @Override
    public boolean isActionable()
    {
        return true;
    }

    @Override
    public boolean isLoaded()
    {
        return true;
    }

    // ----------------------------------------------------------
    /**
     * Returns the uri for a given target..
     * @return uri the URI
     */
    public String getURI()
    {
        return uri;
    }

    // ----------------------------------------------------------
    /**
     * The particular host uri for this project.
     *
     * @param uri
     */
    public void setURI(String uri)
    {
        this.uri = uri;
    }

    // ----------------------------------------------------------
    /**
     * Unique id generated by webcat..
     * @return the id
     */
    public String getID()
    {
        return id;
    }

    // ----------------------------------------------------------
    /**
     * Sets the id.
     * @param id
     */
    public void setID(String id)
    {
        this.id = id;
    }

    // ----------------------------------------------------------
    /**
     * Gets the project dependencies.
     * @return a String containing the project's depend
     */
    public String getDepends()
    {
        return depends;
    }

    // ----------------------------------------------------------
    /**
     * Sets the dependencies for a project.
     * @param depends
     */
    public void setDepends(String depends)
    {
       this.depends = depends;
    }


    @Override
    public void parse(Node parentNode)
    {
        parseCommonAttributes(parentNode);
        String uriValue = getAttribute("uri");
        String idValue = getAttribute("id");
        String dependsValue = getAttribute("depends");

        if (uriValue != null)
        {
            setURI(uriValue);
        }

        if (idValue != null)
        {
            setID(idValue);
        }
        //when processing the dependencies, set link to the project node
        if (dependsValue != null)
        {
            setDepends(dependsValue);
        }

    }


  // ----------------------------------------------------------
  /**
   * Parses the String for depends value into an array of ints
   * representing the id of a given project in the import target tree.
   *
   * @param dependencyString a String listing the ids of projects
   *      this node is dependent on
   * @return an array of project ids representing the dependencies
   *
   */
  protected int[] parseDependencies(String dependencyString)
  {
      ArrayList<Integer> dList = new ArrayList<Integer>();
      Scanner scanner = new Scanner(dependencyString);
      while(scanner.hasNextInt())
      {
          dList.add(scanner.nextInt());
      }
      int[] dArray = new int[dList.size()];
      for (int i = 0; i < dList.size(); i ++)
      {
          dArray[i] = dList.get(i);
      }
      return dArray;
  }
    /*Unique id number for the given project */
    private String id;

    /*URI the uri for the given project */
    private String uri;

    /*Array of dependencies */
    private String depends;

    //Hashmap between dependency id and the url of the project(uri)




}
